function [R, S] = spst_muv(act, dec, classes, Rksnn, nact, ndec, options)
%
% [R, S] = spst_muv(act, dec, classes, Rksnn, nact, ndec, options)
%
% This wrapper generates a corresponding datasets of actives and decoys for
% Maximum Unbisased Validation (MUV) of VS techniques. 
%
%
% Input:    act     Data struct of actives as created by
%                   muv_simple_descriptors
%            .ids.(class)   Data struct of unique identifiers for each compound.
%                           Each field (class) contains mx1 ids.
%            .dsc.(class)   Descriptor matrices for each class. (mxn)
%           
%           dec     Data struct of decoys  as created by muv_simple_descriptors
%            .ids.(class)   Data struct of unique identifiers for each compound.
%                           Each field (class) contains mx1 ids.
%            .dsc.(class)   Descriptor matrices for each class. (mxn)
%
%           classes Cell array of activity class names
%
%           Rksnn   Data struct of logical arrays for actives and decoys 
%                   constituting the respective starting designs generated by spst_ksnn
%
%           nact    Number of actives to select (must be equal to nact in
%                   spst_ksnn)
%
%           ndec    Number of decoys to select (must be equal to nact in
%                   spst_ksnn)
%
%           options Options struct variable. Default values are indicated
%                   by *asterisks*.
%
%           options.distmode:   *'euc'*, 'city', 'cheby'
%           options.iter:       *20*, any integer
%           options.step:       *0.008*, any decimal
%           options.maxD:       *4*, any integer
%           options.targetG:    *312*, any integer
%           options.r           *0.8*, any decimal
%           options.npop        *150*, any integer
%           options.deltaSigmaG *2*, any positive number
%           options.verbose     *true*, false;
%
%
% Copyright:        Sebastian Rohrer
%                   University of Braunschweig, Institute of Technology
%                   Department of Pharmaceutical Chemistry
%                   2008

disp('Generating datasets of actives with common spread. (MUV Design, Row-Exchange Algorithm)');
R.mode.act = 'RX';
R.mode.dec = 'GA';



for i=1:size(classes,1);
    classe = char(classes(i));
    disp(classe);
    R.act.(classe)=spst_RX(act.(classe).dsc, Rksnn.act.(classe), nact, options);
    Rstart.dec.(classe)= spst_knn_decoys(act.(classe).dsc, dec.(classe).dsc, R.act.(classe), ndec, options);
    G = spst_G(act.(classe).dsc(R.act.(classe),:), [], options);
    inter.(classe).G = G;
    S.sigmaG(i,1) = sum(G(:,2));
end


disp('Generating datasets of decoys with common separation. (MUV Design, Genetic Algorithm)');



for i=1:size(classes,1);
    classe = char(classes(i));
    disp(classe);
    R.dec.(classe)= spst_GA(act.(classe).dsc(R.act.(classe),:), dec.(classe).dsc, Rstart.dec.(classe), ndec, options);
    F = spst_F(act.(classe).dsc(R.act.(classe),:), [], dec.(classe).dsc(R.dec.(classe),:), options);
    inter.(classe).F = F;
    S.sigmaF(i,1) = sum(F(:,2));
    s = inter.(classe).F - inter.(classe).G;
    S.sigmaS(i,1) = sum(s(:,2));
end

